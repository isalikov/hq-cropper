(()=>{"use strict";var e={563:(e,n,t)=>{t.d(n,{Z:()=>c});var r=t(537),o=t.n(r),a=t(645),i=t.n(a)()(o());i.push([e.id,"html, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed,\nfigure, figcaption, footer, header, hgroup,\nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n    margin: 0;\n    padding: 0;\n    border: 0;\n    font: inherit;\n    vertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure,\nfooter, header, hgroup, menu, nav, section {\n    display: block;\n}\nbody {\n    line-height: 1;\n}\nol, ul {\n    list-style: none;\n}\nblockquote, q {\n    quotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n    content: none;\n}\n\ntable {\n    border-collapse: collapse;\n    border-spacing: 0;\n}\n\nbody {\n    box-sizing: border-box;\n    font-family: 'Roboto', sans-serif;\n    font-size: 14px;\n    line-height: 18px;\n}\n\n#root {\n    display: flex;\n    justify-content: center;\n    height: 100vh;\n    width: 100vw;\n}\n\n.container {\n    width: 230px;\n    height: 300px;\n    display: flex;\n    justify-content: center;\n    transform: translate(0, 20vh);\n    flex-direction: column;\n    border: 1px solid #EEEEEE;\n    border-radius: 10px;\n    box-shadow: 0 4px 16px rgba(77, 96, 124, 0.2);\n}\n\n.container_body {\n    display: flex;\n    flex: 1 0 auto;\n    align-items: center;\n    justify-content: center;\n}\n\n.container_footer {\n    flex: 0 0 auto;\n    display: flex;\n    height: 80px;\n    align-items: center;\n    justify-content: center;\n}\n\n.button {\n    display: flex;\n    align-items: center;\n    padding: 7px 16px;\n    font-size: 14px;\n    outline: 0;\n    border: 0;\n    background-color: #2F7FEF;\n    color: #FFFFFF;\n    border-radius: 20px;\n    cursor: pointer;\n    user-select: none;\n    -moz-user-select: none;\n    -webkit-user-select: none;\n}\n\n.button:active {\n    transform: translate(0, 1px);\n}\n\n.image {\n    display: flex;\n    border-radius: 50%;\n    overflow: hidden;\n    width: 200px;\n    height: 200px;\n    border: 2px solid #EEEEEE;\n}\n\n.cropBody {\n    width: 700px;\n    height: 700px;\n}\n","",{version:3,sources:["webpack://./public/style.css"],names:[],mappings:"AAAA;;;;;;;;;;;;;IAaI,SAAS;IACT,UAAU;IACV,SAAS;IACT,aAAa;IACb,wBAAwB;AAC5B;AACA,gDAAgD;AAChD;;IAEI,cAAc;AAClB;AACA;IACI,cAAc;AAClB;AACA;IACI,gBAAgB;AACpB;AACA;IACI,YAAY;AAChB;AACA;;IAEI,aAAa;AACjB;;AAEA;IACI,yBAAyB;IACzB,iBAAiB;AACrB;;AAEA;IACI,sBAAsB;IACtB,iCAAiC;IACjC,eAAe;IACf,iBAAiB;AACrB;;AAEA;IACI,aAAa;IACb,uBAAuB;IACvB,aAAa;IACb,YAAY;AAChB;;AAEA;IACI,YAAY;IACZ,aAAa;IACb,aAAa;IACb,uBAAuB;IACvB,6BAA6B;IAC7B,sBAAsB;IACtB,yBAAyB;IACzB,mBAAmB;IACnB,6CAA6C;AACjD;;AAEA;IACI,aAAa;IACb,cAAc;IACd,mBAAmB;IACnB,uBAAuB;AAC3B;;AAEA;IACI,cAAc;IACd,aAAa;IACb,YAAY;IACZ,mBAAmB;IACnB,uBAAuB;AAC3B;;AAEA;IACI,aAAa;IACb,mBAAmB;IACnB,iBAAiB;IACjB,eAAe;IACf,UAAU;IACV,SAAS;IACT,yBAAyB;IACzB,cAAc;IACd,mBAAmB;IACnB,eAAe;IACf,iBAAiB;IACjB,sBAAsB;IACtB,yBAAyB;AAC7B;;AAEA;IACI,4BAA4B;AAChC;;AAEA;IACI,aAAa;IACb,kBAAkB;IAClB,gBAAgB;IAChB,YAAY;IACZ,aAAa;IACb,yBAAyB;AAC7B;;AAEA;IACI,YAAY;IACZ,aAAa;AACjB",sourcesContent:["html, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed,\nfigure, figcaption, footer, header, hgroup,\nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n    margin: 0;\n    padding: 0;\n    border: 0;\n    font: inherit;\n    vertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure,\nfooter, header, hgroup, menu, nav, section {\n    display: block;\n}\nbody {\n    line-height: 1;\n}\nol, ul {\n    list-style: none;\n}\nblockquote, q {\n    quotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n    content: none;\n}\n\ntable {\n    border-collapse: collapse;\n    border-spacing: 0;\n}\n\nbody {\n    box-sizing: border-box;\n    font-family: 'Roboto', sans-serif;\n    font-size: 14px;\n    line-height: 18px;\n}\n\n#root {\n    display: flex;\n    justify-content: center;\n    height: 100vh;\n    width: 100vw;\n}\n\n.container {\n    width: 230px;\n    height: 300px;\n    display: flex;\n    justify-content: center;\n    transform: translate(0, 20vh);\n    flex-direction: column;\n    border: 1px solid #EEEEEE;\n    border-radius: 10px;\n    box-shadow: 0 4px 16px rgba(77, 96, 124, 0.2);\n}\n\n.container_body {\n    display: flex;\n    flex: 1 0 auto;\n    align-items: center;\n    justify-content: center;\n}\n\n.container_footer {\n    flex: 0 0 auto;\n    display: flex;\n    height: 80px;\n    align-items: center;\n    justify-content: center;\n}\n\n.button {\n    display: flex;\n    align-items: center;\n    padding: 7px 16px;\n    font-size: 14px;\n    outline: 0;\n    border: 0;\n    background-color: #2F7FEF;\n    color: #FFFFFF;\n    border-radius: 20px;\n    cursor: pointer;\n    user-select: none;\n    -moz-user-select: none;\n    -webkit-user-select: none;\n}\n\n.button:active {\n    transform: translate(0, 1px);\n}\n\n.image {\n    display: flex;\n    border-radius: 50%;\n    overflow: hidden;\n    width: 200px;\n    height: 200px;\n    border: 2px solid #EEEEEE;\n}\n\n.cropBody {\n    width: 700px;\n    height: 700px;\n}\n"],sourceRoot:""}]);const c=i},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",r=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),r&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),r&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,r,o,a){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(r)for(var c=0;c<this.length;c++){var l=this[c][0];null!=l&&(i[l]=!0)}for(var s=0;s<e.length;s++){var u=[].concat(e[s]);r&&i[u[0]]||(void 0!==a&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=a),t&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=t):u[2]=t),o&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=o):u[4]="".concat(o)),n.push(u))}},n}},537:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */"),i=t.sources.map((function(e){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(e," */")}));return[n].concat(i).concat([a]).join("\n")}return[n].join("\n")}},379:e=>{var n=[];function t(e){for(var t=-1,r=0;r<n.length;r++)if(n[r].identifier===e){t=r;break}return t}function r(e,r){for(var a={},i=[],c=0;c<e.length;c++){var l=e[c],s=r.base?l[0]+r.base:l[0],u=a[s]||0,d="".concat(s," ").concat(u);a[s]=u+1;var p=t(d),f={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==p)n[p].references++,n[p].updater(f);else{var h=o(f,r);r.byIndex=c,n.splice(c,0,{identifier:d,updater:h,references:1})}i.push(d)}return i}function o(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,o){var a=r(e=e||[],o=o||{});return function(e){e=e||[];for(var i=0;i<a.length;i++){var c=t(a[i]);n[c].references--}for(var l=r(e,o),s=0;s<a.length;s++){var u=t(a[s]);0===n[u].references&&(n[u].updater(),n.splice(u,1))}a=l}}},569:e=>{var n={};e.exports=function(e,t){var r=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},795:e=>{e.exports=function(e){var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),n.styleTagTransform(r,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}}},n={};function t(r){var o=n[r];if(void 0!==o)return o.exports;var a=n[r]={id:r,exports:{}};return e[r](a,a.exports,t),a.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),(()=>{var e=t(379),n=t.n(e),r=t(795),o=t.n(r),a=t(569),i=t.n(a),c=t(565),l=t.n(c),s=t(216),u=t.n(s),d=t(589),p=t.n(d),f=t(563),h={};h.styleTagTransform=p(),h.setAttributes=l(),h.insert=i().bind(null,"head"),h.domAPI=o(),h.insertStyleElement=u(),n()(f.Z,h),f.Z&&f.Z.locals&&f.Z.locals;function m(e){return function(e){if(Array.isArray(e))return A(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||b(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function b(e,n){if(e){if("string"==typeof e)return A(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?A(e,n):void 0}}function A(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}var g=function(e){return"hq-cropper__".concat(Math.random().toString(36).substring(2),"_").concat(Math.random().toString(36).substring(2))},v=function(e){return e||[]},y=function(e,n){if(n){var t,r=function(e,n){var t="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!t){if(Array.isArray(e)||(t=b(e))){t&&(e=t);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,i=!0,c=!1;return{s:function(){t=t.call(e)},n:function(){var e=t.next();return i=e.done,e},e:function(e){c=!0,a=e},f:function(){try{i||null==t.return||t.return()}finally{if(c)throw a}}}}(n);try{for(r.s();!(t=r.n()).done;){var o=t.value;e.classList.add(o)}}catch(e){r.e(e)}finally{r.f()}}};const x=function(e){var n,t={applyButton:[g()].concat(m(v(e.applyButton))),cancelButton:[g()].concat(m(v(e.cancelButton))),container:[g()].concat(m(v(e.container))),handlerMove:[g()].concat(m(v(e.handlerMove))),handlerResizeTopLeft:[g()].concat(m(v(e.handlerResizeTopLeft))),handlerResizeTopRight:[g()].concat(m(v(e.handlerResizeTopRight))),handlerResizeBottomLeft:[g()].concat(m(v(e.handlerResizeBottomLeft))),handlerResizeBottomRight:[g()].concat(m(v(e.handlerResizeBottomRight))),sourceImage:[g()].concat(m(v(e.sourceImage))),portalArea:[g()].concat(m(v(e.portalArea))),previewImage:[g()].concat(m(v(e.previewImage))),body:[g()].concat(m(v(e.body))),header:[g()].concat(m(v(e.header))),footer:[g()].concat(m(v(e.footer))),portal:[g()].concat(m(v(e.portal))),preview:[g()].concat(m(v(e.preview))),root:[g()].concat(m(v(e.root)))},r="\n        ".concat((n=t.applyButton[0],"\n    .".concat(n," {\n        padding: 7px 16px;\n        font-size: 14px;\n        outline: 0;\n        border: 0;\n        background-color: #2F7FEF;\n        color: #FFFFFF;\n        border-radius: 20px;\n        user-select: none;\n        cursor: pointer;\n        -moz-user-select: none;\n        -webkit-user-select: none;\n    }\n\n    .").concat(n,":active {\n        transform: translate(0, 1px);\n    }\n")),"\n        ").concat(function(e){return"\n    .".concat(e," {\n        display: flex;\n        flex: 1 0 auto;\n        background: #33393F;\n        overflow: hidden;\n        align-items: center;\n        justify-content: center;\n        position: relative;\n        width: 500px;\n        height: 500px;\n    }\n")}(t.body[0]),"\n        ").concat(function(e){return"\n    .".concat(e," {\n        padding: 7px 16px;\n        font-size: 14px;\n        outline: 0;\n        border: 0;\n        background-color: #E8EFF7;\n        color: #768BA7;\n        border-radius: 20px;\n        cursor: pointer;\n        user-select: none;\n        -moz-user-select: none;\n        -webkit-user-select: none;\n    }\n\n    .").concat(e,":active {\n        transform: translate(0, 1px);\n    }\n")}(t.cancelButton[0]),"\n        ").concat(function(e){return"\n    .".concat(e," {\n        display: flex;\n        flex-direction: column;\n        background-color: #FFFFFF;\n        border-radius: 6px;\n        box-shadow: 0 4px 16px rgba(77, 96, 124, 0.2);\n    }\n")}(t.container[0]),"\n        ").concat(function(e){return"\n    .".concat(e," {\n        display: flex;\n        justify-content: flex-end;\n        gap: 10px;\n        align-items: center;\n        height: 60px;\n        flex: 0 0 auto;\n        padding: 0 20px;\n        border-top: 1px solid #EEE;\n    }\n")}(t.footer[0]),"\n        ").concat(function(e){return"\n    .".concat(e," {\n        display: flex;\n        justify-content: flex-start;\n        gap: 10px;\n        align-items: center;\n        height: 60px;\n        flex: 0 0 auto;\n        padding: 0 20px;\n        border-top-left-radius: 6px;\n        border-top-right-radius: 6px;\n        border-bottom: 1px solid #EEE;\n    }\n")}(t.header[0]),"\n        ").concat(function(e){return"\n    .".concat(e," {\n        display: block;\n        z-index: 101;\n        outline: 1px dashed #aaa;\n        background-color: transparent;\n        cursor: move;\n        -webkit-user-select: none;\n        -moz-user-select: none;\n        -ms-user-select: none;\n        user-select: none;\n        left: 0;\n        top: 0;\n        bottom: 0;\n        right: 0;\n        position: absolute;\n    }\n")}(t.handlerMove[0]),"\n        ").concat(function(e){return"\n    .".concat(e," {\n      position: absolute;\n      z-index: 2;\n      background-color: rgba(0, 0, 0, 0.6);\n    }\n")}(t.portalArea[0]),"\n        ").concat(function(e){return"\n    .".concat(e," {\n      position: absolute;\n      z-index: 3;\n    }\n")}(t.portal[0]),"\n        ").concat(function(e){return"\n    .".concat(e," {\n      backface-visibility: hidden;\n      perspective: 1000px;\n    }\n")}(t.previewImage[0]),"\n        ").concat(function(e){return"\n    .".concat(e," {\n      position: absolute;\n      z-index: 100;\n      left: 0;\n      top: 0;\n      right: 0;\n      bottom: 0;\n      overflow: hidden;\n      border-radius: 50%;\n    }\n")}(t.preview[0]),"\n        ").concat(function(e){return"\n    .".concat(e," {\n        display: block;\n        z-index: 102;\n        background-color: rgba(255, 255, 255, .6);\n        cursor: sw-resize;\n        -webkit-user-select: none;\n        -moz-user-select: none;\n        -ms-user-select: none;\n        user-select: none;\n        left: -3px;\n        bottom: -3px;\n        position: absolute;\n        width: 5px;\n        height: 5px;\n    }\n")}(t.handlerResizeBottomLeft[0]),"\n        ").concat(function(e){return"\n    .".concat(e," {\n        display: block;\n        z-index: 102;\n        background-color: rgba(255, 255, 255, .6);\n        cursor: se-resize;\n        -webkit-user-select: none;\n        -moz-user-select: none;\n        -ms-user-select: none;\n        user-select: none;\n        right: -3px;\n        bottom: -3px;\n        position: absolute;\n        width: 5px;\n        height: 5px;\n    }\n")}(t.handlerResizeBottomRight[0]),"\n        ").concat(function(e){return"\n    .".concat(e," {\n        display: block;\n        z-index: 102;\n        background-color: rgba(255, 255, 255, .6);\n        cursor: nw-resize;\n        -webkit-user-select: none;\n        -moz-user-select: none;\n        -ms-user-select: none;\n        user-select: none;\n        left: -3px;\n        top: -3px;\n        position: absolute;\n        width: 5px;\n        height: 5px;\n    }\n")}(t.handlerResizeTopLeft[0]),"\n        ").concat(function(e){return"\n    .".concat(e," {\n        display: block;\n        z-index: 102;\n        background-color: rgba(255, 255, 255, .6);\n        cursor: ne-resize;\n        -webkit-user-select: none;\n        -moz-user-select: none;\n        -ms-user-select: none;\n        user-select: none;\n        right: -3px;\n        top: -3px;\n        position: absolute;\n        width: 5px;\n        height: 5px;\n    }\n")}(t.handlerResizeTopRight[0]),"\n        ").concat(function(e){return"\n    .".concat(e," {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        background-color: rgba(0, 0, 0, .4);\n        width: 100vw;\n        height: 100vh;\n        position: absolute;\n        left: 0;\n        top: 0;\n        z-index: 1000;\n        overflow-y: auto;\n    }\n")}(t.root[0]),"\n        ").concat(function(e){return"\n    .".concat(e," {\n        backface-visibility: hidden;\n        user-select: none;\n        perspective: 1000px;\n        overflow: hidden;\n        display: block;\n        transform: translateZ(0);\n        width: auto;\n        -webkit-user-drag: none;\n        position: absolute;\n        z-index: 1;\n    }\n")}(t.sourceImage[0]),"\n    "),o=document.createElement("style");return o.innerHTML=r,document.getElementsByTagName("head")[0].prepend(o),t};function w(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}function E(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function B(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?E(Object(t),!0).forEach((function(n){C(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):E(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function C(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}const I=function(e){var n=new Map,t=new Proxy(B({},e),{set:function(e,t,r){return Reflect.set(e,t,r),(n.get(t)||[]).forEach((function(n){return n.action(r,e,t)})),!0}});return{getState:function(){return B({},t)},setState:function(e){Object.keys(e).forEach((function(n){t[n]=e[n]}))},subscribe:function(e,t){var r,o=Math.random().toString(36).substr(2,15),a=n.get(e)||[];return n.set(e,[].concat(function(e){if(Array.isArray(e))return w(e)}(r=a)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(r)||function(e,n){if(e){if("string"==typeof e)return w(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?w(e,n):void 0}}(r)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}(),[{action:t,id:o}])),o}}};function O(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function j(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?O(Object(t),!0).forEach((function(n){z(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):O(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function z(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}var S={action:null,sourceBase64:"",fileName:"",sourceHeight:0,sourceWidth:0,frame:{left:0,top:0,width:0,height:0},portal:{left:0,top:0,size:0},emitted:{X:0,Y:0,left:0,top:0,size:0},config:{applyButtonLabel:"Apply",cancelButtonLabel:"Cancel",compression:1,framePadding:3,portalPosition:"center",portalSize:150,quality:1.01,type:"jpeg"}};function P(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=t){var r,o,a=[],i=!0,c=!1;try{for(t=t.call(e);!(i=(r=t.next()).done)&&(a.push(r.value),!n||a.length!==n);i=!0);}catch(e){c=!0,o=e}finally{try{i||null==t.return||t.return()}finally{if(c)throw o}}return a}}(e,n)||function(e,n){if(e){if("string"==typeof e)return k(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?k(e,n):void 0}}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function k(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}var R;!function(e){e.MOVE="MOVE",e.RESIZE_TL="RESIZE_TL",e.RESIZE_TR="RESIZE_TR",e.RESIZE_BR="RESIZE_BR",e.RESIZE_BL="RESIZE_BL"}(R||(R={}));const L=function(e){var n,t=e(),r=document.createElement("div");return y(r,null===(n=t.css)||void 0===n?void 0:n.preview),r.appendChild(function(e){var n,t=e(),r=document.createElement("img");return y(r,null===(n=t.css)||void 0===n?void 0:n.previewImage),r}(e)),r},T=function(e){var n,t=e(),r=document.createElement("div");return y(r,null===(n=t.css)||void 0===n?void 0:n.portal),r.appendChild(L(e)),r.appendChild(function(e){var n,t=e(),r=document.createElement("span");return y(r,null===(n=t.css)||void 0===n?void 0:n.handlerMove),r.setAttribute("data-action",R.MOVE),r}(e)),r.appendChild(function(e){var n,t=e(),r=document.createElement("span");return y(r,null===(n=t.css)||void 0===n?void 0:n.handlerResizeTopLeft),r.setAttribute("data-action",R.RESIZE_TL),r}(e)),r.appendChild(function(e){var n,t=e(),r=document.createElement("span");return y(r,null===(n=t.css)||void 0===n?void 0:n.handlerResizeTopRight),r.setAttribute("data-action",R.RESIZE_TR),r}(e)),r.appendChild(function(e){var n,t=e(),r=document.createElement("span");return y(r,null===(n=t.css)||void 0===n?void 0:n.handlerResizeBottomLeft),r.setAttribute("data-action",R.RESIZE_BL),r}(e)),r.appendChild(function(e){var n,t=e(),r=document.createElement("span");return y(r,null===(n=t.css)||void 0===n?void 0:n.handlerResizeBottomRight),r.setAttribute("data-action",R.RESIZE_BR),r}(e)),r},q=function(e){var n,t=e(),r=document.createElement("div");return y(r,null===(n=t.css)||void 0===n?void 0:n.body),r.appendChild(function(e){var n,t=e(),r=document.createElement("img");return y(r,null===(n=t.css)||void 0===n?void 0:n.sourceImage),r.setAttribute("alt","source"),r.setAttribute("crossOrigin","anonymous"),r.setAttribute("draggable","false"),r.setAttribute("src",t.sourceBase64),r}(e)),r.appendChild(function(e){var n,t=e(),r=document.createElement("div");return y(r,null===(n=t.css)||void 0===n?void 0:n.portalArea),r.appendChild(T(e)),r}(e)),r},F=function(e,n,t){var r,o=e(),a=document.createElement("div");return y(a,null===(r=o.css)||void 0===r?void 0:r.footer),a.appendChild(function(e,n){var t,r=e(),o=document.createElement("div");return y(o,null===(t=r.css)||void 0===t?void 0:t.cancelButton),o.setAttribute("role","button"),o.innerText=r.config.cancelButtonLabel,o.addEventListener("click",n),o}(e,t)),a.appendChild(function(e,n){var t,r=e(),o=document.createElement("div");return y(o,null===(t=r.css)||void 0===t?void 0:t.applyButton),o.setAttribute("role","button"),o.innerText=r.config.applyButtonLabel,o.addEventListener("click",n),o}(e,n)),a},M=function(e,n,t){var r,o=e(),a=document.createElement("div");return y(a,null===(r=o.css)||void 0===r?void 0:r.container),a.appendChild(function(e){var n,t=e(),r=document.createElement("div");return y(r,null===(n=t.css)||void 0===n?void 0:n.header),r}(e)),a.appendChild(q(e)),a.appendChild(F(e,n,t)),a};function D(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function Z(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?D(Object(t),!0).forEach((function(n){_(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):D(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function _(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function Y(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function U(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?Y(Object(t),!0).forEach((function(n){N(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):Y(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function N(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}const H=function(e,n){var t,r,o,a=e(),i=document.querySelector(".".concat(null===(t=a.css)||void 0===t?void 0:t.portal[0])),c=document.querySelector(".".concat(null===(r=a.css)||void 0===r?void 0:r.portalArea[0])),l=document.querySelector(".".concat(null===(o=a.css)||void 0===o?void 0:o.root[0]));l&&l.addEventListener("mouseup",(function(e){e.preventDefault(),n({action:null})})),i&&i.addEventListener("mousedown",(function(t){t.preventDefault();var r=e().portal;if(t.target){var o=t.target.getAttribute("data-action"),a={X:t.pageX,Y:t.pageY,left:r.left,top:r.top,size:r.size};n({action:o,emitted:a})}})),c&&c.addEventListener("mousemove",(function(t){var r=e().action;r?r===R.MOVE?function(e,n,t){var r=n(),o=r.emitted,a=r.portal,i=r.frame,c=r.config,l=o.left-o.X+e.clientX,s=o.top-o.Y+e.clientY,u=c.framePadding,d=i.width-c.framePadding-a.size,p=c.framePadding,f=i.height-c.framePadding-a.size;l<u&&(l=u),l>d&&(l=d),s<p&&(s=p),s>f&&(s=f),t({portal:Z(Z({},a),{},{left:l,top:s})})}(t,e,n):function(e,n,t){var r=n(),o=r.action,a=r.emitted,i=r.portal,c=r.frame,l=r.config,s=e.pageX-a.X,u=e.pageY-a.Y;switch(o){case R.RESIZE_BR:var d=a.size+Math.max(s,u);return a.top+d>c.height-l.framePadding&&(d=c.height-a.top-l.framePadding),a.left+d>c.width-l.framePadding&&(d=c.width-a.left-l.framePadding),t({portal:U(U({},i),{},{size:d})});case R.RESIZE_TR:var p=s+u>0?a.size+s:a.size-u,f=s+u>0?a.top-s:a.top+u;return a.left+p>c.width-l.framePadding&&(p=c.width-a.left-l.framePadding,f=a.top-c.width+a.left+a.size),f<l.framePadding&&(p=a.top+a.size,f=l.framePadding),t({portal:U(U({},i),{},{top:f,size:p})});case R.RESIZE_TL:var h=s-u<0?a.size-s:a.size-u,m=s-u<0?a.left+s:a.left+u,b=s-u<0?a.top+s:a.top+u;return b<l.framePadding&&(m=a.left-a.top,h=a.top+a.size,b=l.framePadding),m<l.framePadding&&(m=l.framePadding,h=a.left+a.size-l.framePadding,b=a.top-a.left),t({portal:U(U({},i),{},{top:b,left:m,size:h})});case R.RESIZE_BL:var A=s+u>0?a.size+u:a.size-s,g=s+u>0?a.left-u:a.left+s;return A+a.top>c.height-l.framePadding&&(g=a.left-c.height+a.top+a.size,A=c.height-a.top-l.framePadding),g<l.framePadding&&(g=l.framePadding,A=a.left+a.size-l.framePadding),t({portal:U(U({},i),{},{left:g,size:A})});default:;}}(t,e,n):t.preventDefault()}))},X=function(e,n,t,r){if(!e.target.files||0===e.target.files.length)throw new Error("HqCropper: Can't read file input");var o=e.target.files[0],a=new FileReader,i=function(){var e,r=n(),o=document.querySelector(".".concat(null===(e=r.css)||void 0===e?void 0:e.root[0]));o&&o.parentNode&&(o.parentNode.removeChild(o),t(S))},c=function(e){"Escape"===e.key&&i()};document.addEventListener("keydown",c);var l=function(e){e.preventDefault(),document.removeEventListener("keydown",c),i()},s=function(e){e.preventDefault();var t=n(),o=function(e){var n,t=e(),r=document.createElement("canvas"),o=t.sourceWidth/t.frame.width,a=t.sourceHeight/t.frame.height,i=t.portal.left*o,c=t.portal.top*a,l=t.portal.size*Math.min(o,a),s=Math.log(l)/Math.log(t.config.quality);r.width=s,r.height=s;var u,d=document.querySelector(".".concat(null===(n=t.css)||void 0===n?void 0:n.sourceImage[0]));return d&&r?(null==r||null===(u=r.getContext("2d"))||void 0===u||u.drawImage(d,i,c,l,l,0,0,s,s),r.remove(),r.toDataURL(t.config.type,t.config.compression)):""}(n);r(o,t),l(e)};a.onload=function(e){var r=new Image;if(!e.target||"string"!=typeof e.target.result)throw new Error("HqCropper: Can't load result image");r.src=e.target.result,r.onload=function(){var a;!function(e,n,t){var r,o=e(),a=document.createElement("div");y(a,null===(r=o.css)||void 0===r?void 0:r.root),a.appendChild(M(e,n,t)),document.body.appendChild(a)}(n,s,l);var i=function(e,n){var t,r=e(),o=document.querySelector(".".concat(null===(t=r.css)||void 0===t?void 0:t.body[0]));if(!o)return r.frame;var a,i,c=o.getBoundingClientRect(),l=c.width,s=c.height,u=l/s,d=n.width/n.height,p=0,f=0;return u>d?(i=s,f=(l-(a=s*d))/2):(a=l,p=(s-(i=l*(n.height/n.width)))/2),{width:a,height:i,left:f,top:p}}(n,r),c=function(e,n){var t=e().config,r=Math.min(n.width,n.height)-3,o=t.portalSize>r?r:t.portalSize;if(Array.isArray(t.portalPosition)&&2===t.portalPosition.length){var a=function(e,n,t){var r=P(n,2),o=r[0],a=r[1];return[o+e>t.width?(t.width-e)/2:o,a+e>t.height?(t.height-e)/2:a]}(o,t.portalPosition,n),i=P(a,2);return{left:i[0],top:i[1],size:o}}return"center"===t.portalPosition?{size:o,left:(n.width-o)/2,top:(n.height-o)/2}:{left:0,top:0,size:o}}(n,i);t({frame:i,portal:c,fileName:o.name,sourceBase64:null===(a=e.target)||void 0===a?void 0:a.result,sourceHeight:r.height,sourceWidth:r.width}),H(n,t)}},a.readAsDataURL(o),e.target.value=""};var V,W,$,J,G,K,Q,ee,ne,te;V=function(e){var n=document.querySelector("#result-image");n&&n.setAttribute("src",e)},W=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return I(j(j({},S),{},{config:j(j({},S.config),e),css:x(n)}))}({framePadding:10},{body:["cropBody"]}),$=W.getState,J=W.setState,G=W.subscribe,ne=function(e){return X(e,$,J,V)},(te=document.createElement("input")).style.display="none",te.setAttribute("type","file"),te.setAttribute("accept","image/x-png,image/jpeg"),te.addEventListener("change",ne,!1),document.body.appendChild(te),K=te,G("fileName",(function(e,n){var t,r=document.querySelector(".".concat(null===(t=n.css)||void 0===t?void 0:t.header[0]));r&&(r.innerText=e)})),G("sourceBase64",(function(e,n){var t,r,o,a,i=document.querySelector(".".concat(null===(t=n.css)||void 0===t?void 0:t.sourceImage[0]));i&&(i.setAttribute("src",e),i.style.height="".concat(n.frame.height,"px"),i.style.width="".concat(n.frame.width,"px"),i.style.left="".concat(n.frame.left,"px"),i.style.top="".concat(n.frame.top,"px"));var c=document.querySelector(".".concat(null===(r=n.css)||void 0===r?void 0:r.portalArea[0]));c&&(c.style.height="".concat(n.frame.height,"px"),c.style.width="".concat(n.frame.width,"px"),c.style.left="".concat(n.frame.left,"px"),c.style.top="".concat(n.frame.top,"px"));var l=document.querySelector(".".concat(null===(o=n.css)||void 0===o?void 0:o.portal[0]));l&&(l.style.width="".concat(n.portal.size,"px"),l.style.height="".concat(n.portal.size,"px"),l.style.left="".concat(n.portal.left,"px"),l.style.top="".concat(n.portal.top,"px"));var s=document.querySelector(".".concat(null===(a=n.css)||void 0===a?void 0:a.previewImage[0]));s&&(s.setAttribute("src",e),s.style.height="".concat(n.frame.height,"px"),s.style.width="".concat(n.frame.width,"px"),s.style.marginLeft="-".concat(n.portal.left,"px"),s.style.marginTop="-".concat(n.portal.top,"px"))})),G("portal",(function(e,n){var t,r=document.querySelector(".".concat(null===(t=n.css)||void 0===t?void 0:t.portal[0]));r&&(r.style.left="".concat(e.left,"px"),r.style.top="".concat(e.top,"px"),r.style.width="".concat(e.size,"px"),r.style.height="".concat(e.size,"px"))})),G("portal",(function(e,n){var t,r=document.querySelector(".".concat(null===(t=n.css)||void 0===t?void 0:t.previewImage[0]));r&&(r.style.marginLeft="-".concat(n.portal.left,"px"),r.style.marginTop="-".concat(n.portal.top,"px"))})),Q={open:function(){return K.click()}},(ee=document.querySelector("#change-image-button"))&&ee.addEventListener("click",(function(){return Q.open()}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,